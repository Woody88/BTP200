Script started on Fri 03 Apr 2015 04:13:56 PM EDT
wdelhia@matrix:~/btp200/assign2> whoami
wdelhia
wdelhia@matrix:~/btp200/assign2> cat GS1Prefix.h
const int MAX = 700;

class Prefix {

	int  no;             // number of entries
	int  area[MAX];      // area elements
	char pubLow[MAX][8]; // low end of publisher range
	char pubHgh[MAX][8]; // high end of publisher range
	int  pubLen[MAX];    // no of chars in publisher string
	
	public:
	Prefix(const char* filename);
	bool isRegistered(int area) const;
	int minNoDigits(int area) const;
	bool isRegistered(int area, const char* publisher) const;
};

wdelhia@matrix:~/btp200/assign2> cat GS1Prefix.cpp
#include <iostream>
#include <fstream>
#include <cstring>
#include "GS1Prefix.h"
using namespace std;

Prefix::Prefix(const char* filename){
	
	bool rc = false;
	if (filename != nullptr) {
		std::ifstream file(filename);
		if (file.is_open()) {
			int no = 0;
			while (file.good()) {  // version 1.2
				file >> area[no] >> pubLow[no]; // version 1.3
				if (file.good()) {
					file >> pubHgh[no]; // version 1.3
					pubLen[no] = std::strlen(pubLow[no]);
					no++;
				}
			}
			if (no > 0) {
				rc = true;
				this->no = no;
			}
		}
	}

}

bool Prefix::isRegistered(int marea) const{
	int valid = 0;
	for(int i = 0; i < no; i++) {
		if(area[i] == marea){
			valid = 1;
			i = no;
		}
	
	}
	
	return valid;
}

int Prefix::minNoDigits(int area) const{
	int publisherLen = 0;
	
	for(int i = 0; i < this->no; i++){
		if(this->area[i] == area){
			publisherLen = this->pubLen[i];	
			i = this->no;
		}
	}
	return publisherLen;
}
bool Prefix::isRegistered(int marea, const char* publisher) const{
	int valid = 0;
	for(int i = 0; i < no; i++){
		if(area[i] == marea && strlen(publisher) == pubLen[i] ){
			if(atoi(publisher)>= atoi(pubLow[i]) && atoi(publisher) <= atoi(pubHgh[i])){
				valid = 1;
			}
		}			
	}
	return valid;
}
wdelhia@matrix:~/btp200/assign2> cat EAN.h
class Prefix;

 class EAN {
	
	char ean[17];
	char area[6], publisher[8], title[7];
	char strStyle[2];
 	int registered; 
		
	public: 
	EAN();
  	EAN(const char* str, const Prefix& list);
	bool isRegistered(const Prefix& list);
	bool empty() const;
	bool isRegistered() const;
	void style(char);
	void toStr(char* str) const;
	void toStrWithStyle(char* str) const;
	void display(std::ostream& os) const;
	bool read(std::istream& is, const Prefix& list);


};

bool isValid(const char* str);

wdelhia@matrix:~/btp200/assign2> cat EAN.h[Kx[Kcpp 
// EAN Processor
// BTP200 - Assignment 2
// EAN.cpp
// Woodson Delhia
// date--

#include <iostream>
#include <iomanip>
#include <cstring>
#include <stdlib.h>
using namespace std;	
#include "EAN.h"
#include "GS1Prefix.h"
#define  PREFIX_LIST "prefixRanges.txt"
using namespace std;

bool isValid(const char* str){
	int oddNum = 0, evenNum = 0, total, valid = 0, tempSum = 0;			
		
	if(str == NULL|| str[0] != '9' || str[1] != '7')
		valid = 0;
	else 
		if(!(str[2] != '8' || str[2] != '9'))
			valid = 0;
		else{
			////////// This point we know its EAN number //////////

			if(strlen(str) == 13) {
				valid = 1;
				for(int i = 0; i < strlen(str); i++){                  //Loop through str array
					if(!isdigit(str[i])){                         //Validate if str at i position is a digit
						valid = 0;
						break;                               //If not digit break loop
					}
		
		
					else	{
							if((i+1)%2 == 0){           //Valid if i is not equal to 12 and is an even digit
								evenNum+=((str[i] - '0')*3);
								tempSum += evenNum;
							}	 
							else{ 
								oddNum+=(str[i] - '0');
								tempSum += oddNum;
							}	
						}
				}
			}

			if(oddNum != 0 && evenNum != 0){            //Validate that there is a value greate than 0 in even and odd Num
				total = oddNum + evenNum;
				if((total%10) == 0)                //If total a modulo of 10 EAN number is valid
					valid = 1;
				else
					valid = 0;
			}	
		}
	return valid;
}

bool EAN::isRegistered(const Prefix& list){

	//cout << "INSIDE IS REGISTERED!" << endl; 
	//cout << "EAN: " << ean << endl;
	int valid = 0, areaCheck = 0, startPos = 3, areaMax = 5, pubMax = 7, titleMax = 6, position = 0;
	

	for(int i = startPos; i < startPos + areaMax; i++){
		area[i-startPos] = ean[i];
		area[(i-startPos)+1] = '\0';
		areaCheck = atoi(area);
		if(list.isRegistered(areaCheck)){
			valid = 1;
			position = i + 1;
			i = startPos + areaMax;
		}
	}

	if(valid == 1){
		int minPublen = 0;
		minPublen = list.minNoDigits(areaCheck);	
		if(minPublen == 0)
			valid =0;
			
	}

	if(valid == 1){
		int k = 0, tempPos = 0;
		
		valid = 0;
		
		for(int i = position; i < position + pubMax; i++){
			publisher[k] = ean[i];
			publisher[k+1] = '\0';
			if(list.isRegistered(areaCheck, publisher)){		
				valid = 1;
				tempPos = i;
				i = position + pubMax;
			}
			k++;
		}
		position = tempPos + 1;
	}

	if(valid == 1){
		int l = 0; 

		while(position < 12){
			title[l] = ean[position];
			title[l+1] = '\0';
			l++;
			position++;
		}		
	}
	
	registered = valid;
	return valid;
		
}

EAN::EAN(){
	ean[0] = '\0';
	strStyle[0] = '\0';
	area[0] = '\0';
	publisher[0] = '\0';
	title[0] = '\0';
	registered = false;
}

EAN::EAN(const char* str, const Prefix& list){
	
	if( isValid(str) ){
		strcpy(ean, str);
		isRegistered(list);
		strStyle[0] = '0';
		strStyle[1] = '\0';
	}
	else{
		ean[0] = '\0';
	        strStyle[0] = '\0';
        	area[0] = '\0';
        	publisher[0] = '\0';
        	title[0] = '\0';
		registered = false;
		
	}
	

}

bool EAN::empty() const{
	if(ean[0] == '\0' && strStyle[0] == '\0' && area[0] == '\0' && publisher[0] == '\0' && title[0] == '\0')
		return true;
	else
		return false;
}

bool EAN::isRegistered() const{
	// if(area[0] != '\0' && publisher[0] != '\0' && title[0] != '\0')
	if (registered)
		return true;
	else 
		return false;
}

void EAN::style(char s){

	strStyle[0] = s;
	strStyle[1] = '\0';
}
void EAN::toStr(char* str) const{
	strcpy(str, ean);		
}
void EAN::toStrWithStyle(char* str) const{
	int i = 3 + strlen(area) + strlen(publisher) + strlen(title);
        char string[17] = {'\0'};
        char styling[2];
        char lastDigit[2] = {'\0'};
        str[0] = '\0';
        lastDigit[0] = ean[12];
        lastDigit[1] = '\0';

        if(isRegistered()){
                if(strcmp(strStyle, "0") == 0)
                        strcpy(styling, "-");
                else
                        strcpy(styling, strStyle);

                strcat(str, "978");
                strcat(str, styling);
                strcat(str, area);
                strcat(str, styling);
                strcat(str, publisher);
                strcat(str, styling);
                strcat(str, title);
                strcat(str, styling);
                strcat(str, lastDigit);
        }
        else{
                strcat(str, ean);
               
        }

}
bool EAN::read(std::istream& is, const Prefix& list){
	char eanNum[14];
	eanNum[0] = '\0';
	int valid = 0, loop = 1;

	
	do{
		
		cout << "Add EAN(0 to quit): ";
		is.getline(eanNum, 14);
			
	 	if( strlen(eanNum)== 0 ){
			is.clear();
			is.ignore(2000,'\n');
			cerr << "Error. Try Again." << endl; 
		}
		else if ( strcmp(eanNum,"0") == 0 ){
			loop = 0;
			cout << "<-Returning to menu" << endl;
		}
		 else if(strlen(eanNum)!= 13){
                        cerr << "Incorrect number of digits. Try Again" << endl;

                }
		else if( !isValid(eanNum) ){
			is.clear();
			cerr << "Invalid check digit. Try again." << endl;
		}
		else{
			*this = EAN(eanNum, list);
			loop = 0;
			valid = 1;
		}
	
			
	
		
	}while(loop == 1);	
	
	return valid;
}

 void EAN::display(std::ostream& os) const {
	char eanNum[18];
	eanNum[0] = '\0'; 
	toStrWithStyle(eanNum);

	os << right << setw(17) <<  eanNum;
}
wdelhia@matrix:~/btp200/assign2> g++ a2test.cpp GS1Prefix.cpp EAN.cpp[C[1@-[1@s[1@t[1@d[1@=[1@c[1@+[1@+[1@0[1@x[1@ 
wdelhia@matrix:~/btp200/assign2> a.out
GS1Prefix Tests
===============
Passed test    1 (isRegistered(-1))
Passed test    2 (isRegistered(99955))
Passed test    3 (isRegistered(0))
Passed test    4 (isRegistered(-1, 0))
Passed test    5 (isRegistered(99955, 0))
Passed test    6 (isRegistered(0, 10))
Passed test    7 (isRegistered(99955, 0))
Passed test    8 (isRegistered(0, 95000000))
Passed test    9 (minNoDigits(-1))
Passed test   10 (minNoDigits(0))
Passed test   11 (minNoDigits(92))
Passed test   12 (minNoDigits(99955))

GS1 Prefix Tests passed!

EAN Tests
=========
Passed test   13 (EAN() and empty())
Passed test   14 (EAN() and isRegistered())
Passed test   15 (EAN("9789070002046", ) and empty())
Passed test   16 (EAN("9789070002046", ) and isRegistered())
Passed test   17 (EAN(9789070002043) and empty())
Passed test   18 (EAN("9789070002043", ) and isRegistered())
Passed test   19 (toStr on EAN() and IBSN("9789070002043", ))
Passed test   20 (EAN(9789070002046) and toStr(char*))
Passed test   21 (EAN(...) and toStr(char*))
Passed test   22 (EAN(9789070002046), style(' ') and toStr(char*))
Passed test   23 (EAN(9789070002046), style('\0') and toStr(char*))
Passed test   24 (EAN(9789070002046), style('-') and toStrWithStyle(char*))
Passed test   25 (EAN(9789070002046), style(' ') and toStrWithStyle(char*))
Passed test   26 (EAN(9789070002046), style('\0') and toStrWithStyle(char*))
Passed test   27 (EAN(9789070002046), style('-') and toStrWithStyle(char*))
Passed test   28 (EAN(9789070002043), style('\0') and toStr(char*))

EAN Tests passed!

EAN Registered Tests
====================
Passed test   29 (isRegistered() returned true for 9789070002046)
Passed test   30 (isRegistered() returned false for 9789995500009)
Passed test   31 (isRegistered() returned true for 9780000000002)
Passed test  131 (isRegistered() returned true for 9788070000007)
Passed test  231 (isRegistered() returned true for 9789020000009)
Passed test  331 (isRegistered() returned true for 9789559500001)
Passed test  431 (isRegistered() returned true for 9789679989007)
Passed test  531 (isRegistered() returned true for 9789781990007)
Passed test  631 (isRegistered() returned true for 9789946000008)
Passed test  731 (isRegistered() returned true for 9789961700006)
Passed test  831 (isRegistered() returned true for 9789976999907)
Passed test  931 (isRegistered() returned true for 9789990389005)
Passed test 1031 (isRegistered() returned true for 9789992200001)
Passed test 1131 (isRegistered() returned true for 9789993990000)

EAN Registered Tests passed!


Your Bookstore modules have passed 1151 of 1151 tests

Congratulations!!!   Your Bookstore modules are ready for submission

wdelhia@matrix:~/btp200/assign2> cat a2main.cpp GS1Prefix.cpp EAN.cpp
// Bookstore Order Processor
// OOP244.141 - Assignment 2
// a2main.cpp
// Version 1.0
// Chris Szalwinski
// Nov 16 2013

#include <iostream>
#include "GS1Prefix.h"
#include "EAN.h"

#define MAX_EAN 100
using namespace std;
char menu(std::istream& is);
bool style(std::istream& is, char& s);

int main() {
    int no = 0;
    char s, choice;
    Prefix prefix("prefixRanges.txt");
    EAN ean[MAX_EAN];

    std::cout << "EAN Processor\n"
              << "=============\n";

    // process user input
    do {
        choice = menu(std::cin);
        std::cout << std::endl;
        switch(choice) {
            case 'A':
                {
                    EAN temp;
                    if (temp.read(std::cin, prefix))
                        if (no < MAX_EAN)
                            ean[no++] = temp;
                        else
                            std::cerr << "** No space for more EANs!" << std::endl;
                    else
                        std::cerr << "** No EAN added!" << std::endl;
                }
                break;
            case 'V':
                std::cout << "              EAN\n";
                std::cout << "-----------------\n";
                for (int i = 0; i < no; i++) {
                    if (!ean[i].empty()) {
                        ean[i].display(std::cout);
                        std::cout << std::endl;
                    }
                }
                break;
            case 'F':
                if (style(std::cin, s))
					for (int i = 0; i < no; i++)
						ean[i].style(s);
                break;
        }
    } while (choice != 'Q');

    return 0;
}

// menu prompts for and accepts an option selection from standard input and
// returns the character identifying the selected option
//
char menu(std::istream& is) {
    char c;
    int  ok = false;

    std::cout << '\n';
    std::cout << "Please select from the following options :\n";
    std::cout << " A - Add an EAN\n";
    std::cout << " F - Change output style\n";
    std::cout << " V - View all EANs\n";
    std::cout << " Q - Quit\n";
    do {
        std::cout << " Your selection : ";
        c = ' ';
        is.get(c);
        if (c >= 'a' && c <= 'z')
            c -= 'a' - 'A';
        if (is.fail()) {
            is.clear();
            is.ignore(2000, '\n');
            std::cerr << " Invalid input.  Try again." << std::endl;
        } else if (c == '\n') {
            ; // no input - try again
        } else if (c != 'A' && c != 'V' && c != 'F' && c != 'Q') {
            is.ignore(2000, '\n');
            std::cerr << " Invalid Character.  Try again." << std::endl;
        } else if (is.get() != '\n') {
            is.ignore(2000, '\n');
            std::cerr << " Trailing Characters.  Try Again. " << std::endl;
        } else if (c == 'A' || c == 'V' || c == 'F' || c == 'Q')
            ok = true;
    } while (ok == 0);

    return c;
}

// style prompts for and accepts the style from input stream is
//
bool style(std::istream& is, char& s) {
	bool rc = false, ok = false;
	char c;
	do {
		std::cout << " EAN Style ('-', ' ', '\\n' or '0' to quit) : ";
		c = ' ';
		is.get(c);
		if (is.fail()) {
			is.clear();
			is.ignore(2000, '\n');
			std::cerr << " Invalid input. Try again.\n";
        } else if (c != '-' && c != ' ' && c != '\n' && c != '0') {
            is.ignore(2000, '\n');
            std::cerr << " Invalid Character.  Try again.\n";
		} else if (c == '0') {
			if (is.get() != '\n') {
				is.ignore(2000, '\n');
				std::cerr << " Trailing Characters.  Try Again.\n";
			} else
				ok = true;
		} else if (c == '\n') {
			ok = true;
			s = '\0';
			rc = true;
        } else if (is.get() != '\n') {
            is.ignore(2000, '\n');
            std::cerr << " Trailing Characters.  Try Again.\n";
        } else if (c == '-' || c == ' ') {
            ok = true;
			s = c;
			rc = true;
		}
	} while (!ok);

	return rc;
}

#include <iostream>
#include <fstream>
#include <cstring>
#include "GS1Prefix.h"
using namespace std;

Prefix::Prefix(const char* filename){
	
	bool rc = false;
	if (filename != nullptr) {
		std::ifstream file(filename);
		if (file.is_open()) {
			int no = 0;
			while (file.good()) {  // version 1.2
				file >> area[no] >> pubLow[no]; // version 1.3
				if (file.good()) {
					file >> pubHgh[no]; // version 1.3
					pubLen[no] = std::strlen(pubLow[no]);
					no++;
				}
			}
			if (no > 0) {
				rc = true;
				this->no = no;
			}
		}
	}

}

bool Prefix::isRegistered(int marea) const{
	int valid = 0;
	for(int i = 0; i < no; i++) {
		if(area[i] == marea){
			valid = 1;
			i = no;
		}
	
	}
	
	return valid;
}

int Prefix::minNoDigits(int area) const{
	int publisherLen = 0;
	
	for(int i = 0; i < this->no; i++){
		if(this->area[i] == area){
			publisherLen = this->pubLen[i];	
			i = this->no;
		}
	}
	return publisherLen;
}
bool Prefix::isRegistered(int marea, const char* publisher) const{
	int valid = 0;
	for(int i = 0; i < no; i++){
		if(area[i] == marea && strlen(publisher) == pubLen[i] ){
			if(atoi(publisher)>= atoi(pubLow[i]) && atoi(publisher) <= atoi(pubHgh[i])){
				valid = 1;
			}
		}			
	}
	return valid;
}
// EAN Processor
// BTP200 - Assignment 2
// EAN.cpp
// Woodson Delhia
// date--

#include <iostream>
#include <iomanip>
#include <cstring>
#include <stdlib.h>
using namespace std;	
#include "EAN.h"
#include "GS1Prefix.h"
#define  PREFIX_LIST "prefixRanges.txt"
using namespace std;

bool isValid(const char* str){
	int oddNum = 0, evenNum = 0, total, valid = 0, tempSum = 0;			
		
	if(str == NULL|| str[0] != '9' || str[1] != '7')
		valid = 0;
	else 
		if(!(str[2] != '8' || str[2] != '9'))
			valid = 0;
		else{
			////////// This point we know its EAN number //////////

			if(strlen(str) == 13) {
				valid = 1;
				for(int i = 0; i < strlen(str); i++){                  //Loop through str array
					if(!isdigit(str[i])){                         //Validate if str at i position is a digit
						valid = 0;
						break;                               //If not digit break loop
					}
		
		
					else	{
							if((i+1)%2 == 0){           //Valid if i is not equal to 12 and is an even digit
								evenNum+=((str[i] - '0')*3);
								tempSum += evenNum;
							}	 
							else{ 
								oddNum+=(str[i] - '0');
								tempSum += oddNum;
							}	
						}
				}
			}

			if(oddNum != 0 && evenNum != 0){            //Validate that there is a value greate than 0 in even and odd Num
				total = oddNum + evenNum;
				if((total%10) == 0)                //If total a modulo of 10 EAN number is valid
					valid = 1;
				else
					valid = 0;
			}	
		}
	return valid;
}

bool EAN::isRegistered(const Prefix& list){

	//cout << "INSIDE IS REGISTERED!" << endl; 
	//cout << "EAN: " << ean << endl;
	int valid = 0, areaCheck = 0, startPos = 3, areaMax = 5, pubMax = 7, titleMax = 6, position = 0;
	

	for(int i = startPos; i < startPos + areaMax; i++){
		area[i-startPos] = ean[i];
		area[(i-startPos)+1] = '\0';
		areaCheck = atoi(area);
		if(list.isRegistered(areaCheck)){
			valid = 1;
			position = i + 1;
			i = startPos + areaMax;
		}
	}

	if(valid == 1){
		int minPublen = 0;
		minPublen = list.minNoDigits(areaCheck);	
		if(minPublen == 0)
			valid =0;
			
	}

	if(valid == 1){
		int k = 0, tempPos = 0;
		
		valid = 0;
		
		for(int i = position; i < position + pubMax; i++){
			publisher[k] = ean[i];
			publisher[k+1] = '\0';
			if(list.isRegistered(areaCheck, publisher)){		
				valid = 1;
				tempPos = i;
				i = position + pubMax;
			}
			k++;
		}
		position = tempPos + 1;
	}

	if(valid == 1){
		int l = 0; 

		while(position < 12){
			title[l] = ean[position];
			title[l+1] = '\0';
			l++;
			position++;
		}		
	}
	
	registered = valid;
	return valid;
		
}

EAN::EAN(){
	ean[0] = '\0';
	strStyle[0] = '\0';
	area[0] = '\0';
	publisher[0] = '\0';
	title[0] = '\0';
	registered = false;
}

EAN::EAN(const char* str, const Prefix& list){
	
	if( isValid(str) ){
		strcpy(ean, str);
		isRegistered(list);
		strStyle[0] = '0';
		strStyle[1] = '\0';
	}
	else{
		ean[0] = '\0';
	        strStyle[0] = '\0';
        	area[0] = '\0';
        	publisher[0] = '\0';
        	title[0] = '\0';
		registered = false;
		
	}
	

}

bool EAN::empty() const{
	if(ean[0] == '\0' && strStyle[0] == '\0' && area[0] == '\0' && publisher[0] == '\0' && title[0] == '\0')
		return true;
	else
		return false;
}

bool EAN::isRegistered() const{
	// if(area[0] != '\0' && publisher[0] != '\0' && title[0] != '\0')
	if (registered)
		return true;
	else 
		return false;
}

void EAN::style(char s){

	strStyle[0] = s;
	strStyle[1] = '\0';
}
void EAN::toStr(char* str) const{
	strcpy(str, ean);		
}
void EAN::toStrWithStyle(char* str) const{
	int i = 3 + strlen(area) + strlen(publisher) + strlen(title);
        char string[17] = {'\0'};
        char styling[2];
        char lastDigit[2] = {'\0'};
        str[0] = '\0';
        lastDigit[0] = ean[12];
        lastDigit[1] = '\0';

        if(isRegistered()){
                if(strcmp(strStyle, "0") == 0)
                        strcpy(styling, "-");
                else
                        strcpy(styling, strStyle);

                strcat(str, "978");
                strcat(str, styling);
                strcat(str, area);
                strcat(str, styling);
                strcat(str, publisher);
                strcat(str, styling);
                strcat(str, title);
                strcat(str, styling);
                strcat(str, lastDigit);
        }
        else{
                strcat(str, ean);
               
        }

}
bool EAN::read(std::istream& is, const Prefix& list){
	char eanNum[14];
	eanNum[0] = '\0';
	int valid = 0, loop = 1;

	
	do{
		
		cout << "Add EAN(0 to quit): ";
		is.getline(eanNum, 14);
			
	 	if( strlen(eanNum)== 0 ){
			is.clear();
			is.ignore(2000,'\n');
			cerr << "Error. Try Again." << endl; 
		}
		else if ( strcmp(eanNum,"0") == 0 ){
			loop = 0;
			cout << "<-Returning to menu" << endl;
		}
		 else if(strlen(eanNum)!= 13){
                        cerr << "Incorrect number of digits. Try Again" << endl;

                }
		else if( !isValid(eanNum) ){
			is.clear();
			cerr << "Invalid check digit. Try again." << endl;
		}
		else{
			*this = EAN(eanNum, list);
			loop = 0;
			valid = 1;
		}
	
			
	
		
	}while(loop == 1);	
	
	return valid;
}

 void EAN::display(std::ostream& os) const {
	char eanNum[18];
	eanNum[0] = '\0'; 
	toStrWithStyle(eanNum);

	os << right << setw(17) <<  eanNum;
}
wdelhia@matrix:~/btp200/assign2> cat a2main.cpp GS1Prefix.cpp EAN.cpp[1P[1P[1P[1P[1@g[1@+[1@+[1@ [1@-[1@s[1@t[1@d[1@ [1P[1@=[1@ [1P[1@c[1@+[1@+[1@0[1@x[1@ 
wdelhia@matrix:~/btp200/assign2> a.out
EAN Processor
=============

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : a

Add EAN(0 to quit): 9789070002046

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : a

Add EAN(0 to quit): 9780003194875
Invalid check digit. Try again.
Add EAN(0 to quit): 978000319487
Incorrect number of digits. Try Again
Add EAN(0 to quit): 9780003194876

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : a

Add EAN(0 to quit): 97899955000
Incorrect number of digits. Try Again
Add EAN(0 to quit): a
Incorrect number of digits. Try Again
Add EAN(0 to quit): 0
<-Returning to menu
** No EAN added!

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : a

Add EAN(0 to quit): 9789995500009

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : v

              EAN
-----------------
978-90-70002-04-6
978-0-00-319487-6
    9789995500009

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : f

 EAN Style ('-', ' ', '\n' or '0' to quit) :  

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : v

              EAN
-----------------
978 90 70002 04 6
978 0 00 319487 6
    9789995500009

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : q

wdelhia@matrix:~/btp200/assign2> exit
exit

Script done on Fri 03 Apr 2015 04:17:13 PM EDT
