Script started on Sun 01 Feb 2015 04:27:32 AM EST
wdelhia@matrix:~/btp200/workshop2/unittest> whoami
wdelhia
wdelhia@matrix:~/btp200/workshop2/unittest> cat 2[Kw2.cpp Frr[Kaction.h Fraction.cpp 
#include <iostream>
 using namespace std;
 #include "Fraction.h"

 int unitTests(Fraction* f) {

     cout << "Fraction Simplifier Tests" << endl; 
     cout << "=========================" << endl;

     // fill in code for unit tests
	int result = 0, num, denom, allResult = 1;
 	

		result = testSuite(f, 4, 16, 1, 4);
		if(result){
			cout << "Test 1" << " Passed" << endl;
			f->display();
		}else{ 	
			cout << "Test 1" << " Failed" << endl;
			allResult = 0;
			f->display();
		}

		result = testSuite(f, -4, 16, -1, 4);
                if(result){
                        cout << "Test 2" << " Passed" << endl;
                        f->display();
                }else{
                        cout << "Test 2" << " Failed" << endl;
                        allResult = 0;
			f->display();
		}

		result = testSuite(f, 0, 16, 0, 16);   
                if(result){
                        cout << "Test 3" << " Passed" << endl;
                        f->display();
                }else{
                        cout << "Test 3" << " Failed" << endl;
                        allResult = 0;
			f->display();
                }
		
		result = testSuite(f, 0, 0, 0, 0);   
                if(result){
                        cout << "Test 4" << " Passed" << endl;
                        f->display();
                }else{
                        cout << "Test 4" << " Failed" << endl;
                        allResult = 0;
			f->display();
                }

		result = testSuite(f, 4, 0, 4, 0);   
                if(result){
                        cout << "Test 5" << " Passed" << endl;
                        f->display();
                }else{
                        cout << "Test 5" << " Failed" << endl;
                        allResult = 0;
			f->display();
                }		

	return allResult;
}

 int main() {
     Fraction fraction;
     bool passed;

     passed = unitTests(&fraction);

     if (passed)
         cout << "Passed All Tests" << endl;
     else
         cout << "Failed Tests" << endl;
 }

class Fraction {

int num, denom, originalNum, originalDenom;
bool num_sign, denom_sign;

public:
	void set(int, int);
	void simplify();
	int gcd(int, int);
	int numerator() const;
	int denomenator() const;
	void display();
};

int testSuite(Fraction *, int, int, int, int);
#include <iostream>
#include "Fraction.h"
void Fraction::set(int x, int y){	
	
	originalNum = num = x;
	originalDenom = denom = y;
		if(denom == 0 || num == 0){
		}
		else{
			simplify();
		}
	
}

void Fraction::simplify(){

        int a, b, result;
     		
        if(num  == 0){
                set(0, 0);
        }
        else if (denom  == 0) {
                set(0,0);
        }

        if (num != 0 && denom != 0){
                
		if (num < 0) {
			num_sign = true;
			a = num * -1;
		}
		else
			a = num;

		if (denom < 0) {
			denom_sign = true;
			b = denom * -1;
		}
		else
			b = denom;

		result = gcd(a, b);

		if(num_sign){
			a = a * -1;
		}
		if (denom_sign) {
			b = b * -1;
		}
                num = num / result;
		denom = denom / result;
        }	
}


int Fraction::gcd(int k, int l){
        int a, b, c, d;
        a = k;
        b = l;
        c = a/b;
        d = a%b;

        if(d != 0){
                gcd(b, d);
        }
        else {
                return b;
        }

}


void Fraction::display(){
	int nume, denome;
	nume = numerator();
	denome = denomenator();
	
	if (denome == 0 || denome == 0 && nume == 0){
		std::cout << "Input: " << originalNum << "/" << originalDenom << std::endl;
		std::cout << "Output: Undefined" << std::endl;
	}
	else{
		std::cout << "Input: " << originalNum << "/" << originalDenom << std::endl;
        	std::cout << "Output: " << numerator() << "/" << denomenator() << std::endl;
	}
}

int Fraction::numerator() const {
	return num;
}

int Fraction::denomenator() const {
	return denom;
}

int testSuite(Fraction *f, int num, int denom, int resultNum, int resultDenom){
	int passed = 0;
		f->set(num,denom);
                if(f->numerator() == resultNum && f->denomenator() == resultDenom){
                        passed = 1;
                }
                else    
			 passed = 0;
	return passed;
}
wdelhia@matrix:~/btp200/workshop2/unittest> g++ -o w2 w2.cpp Fraction.cpp 
wdelhia@matrix:~/btp200/workshop2/unittest> w2
Fraction Simplifier Tests
=========================
Test 1 Passed
Input: 4/16
Output: 1/4
Test 2 Passed
Input: -4/16
Output: -1/4
Test 3 Passed
Input: 0/16
Output: 0/16
Test 4 Passed
Input: 0/0
Output: Undefined
Test 5 Passed
Input: 4/0
Output: Undefined
Passed All Tests
wdelhia@matrix:~/btp200/workshop2/unittest> exit
exit

Script done on Sun 01 Feb 2015 04:28:13 AM EST
